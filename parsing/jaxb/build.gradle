plugins {
    id 'info.ankin.how.spring.app-conventions'
}

dependencies {
    // https://stackoverflow.com/a/47412779
    implementation 'javax.xml.bind:jaxb-api'
    // JAX-B dependencies for JDK 9+ https://stackoverflow.com/a/43574427
    implementation 'jakarta.xml.bind:jakarta.xml.bind-api' // :2.3.2'
    runtimeOnly 'org.glassfish.jaxb:jaxb-runtime' // :2.3.2'
    implementation('org.xmlunit:xmlunit-core')
}

def bgSrc = projectDir.toPath().resolve(java.nio.file.Path.of('src', 'main/resources/jaxb-demo/schemas/ship-order.xsd'.split('/')))
def bgDest = buildDir.toPath().resolve(java.nio.file.Path.of('generated', 'sources', 'beanGeneration'))

sourceSets.main {
    java {
        srcDir(bgDest)
    }
}

def bg = configurations.create('beanGeneration')
bg.extendsFrom(configurations.implementation)

dependencies {
    beanGeneration 'org.glassfish.jaxb:jaxb-xjc'
}

'''
Usage: xjc [-options ...] <schema file/URL/dir/jar> ... [-b <bindinfo>] ...
If dir is specified, all schema files in it will be compiled.
If jar is specified, /META-INF/sun-jaxb.episode binding file will be compiled.
Options:
  -nv                :  do not perform strict validation of the input schema(s)
  -extension         :  allow vendor extensions - do not strictly follow the
                        Compatibility Rules and App E.2 from the JAXB Spec
  -b <file/dir>      :  specify external bindings files (each <file> must have its own -b)
                        If a directory is given, **/*.xjb is searched
  -d <dir>           :  generated files will go into this directory
  -p <pkg>           :  specifies the target package
  -m <name>          :  generate module-info.java with given Java module name
  -httpproxy <proxy> :  set HTTP/HTTPS proxy. Format is [user[:password]@]proxyHost:proxyPort
  -httpproxyfile <f> :  Works like -httpproxy but takes the argument in a file to protect password 
  -classpath <arg>   :  specify where to find user class files
  -catalog <file>    :  specify catalog files to resolve external entity references
                        support TR9401, XCatalog, and OASIS XML Catalog format.
  -readOnly          :  generated files will be in read-only mode
  -npa               :  suppress generation of package level annotations (**/package-info.java)
  -no-header         :  suppress generation of a file header with timestamp
  -target (2.0|2.1)  :  behave like XJC 2.0 or 2.1 and generate code that doesnt use any 2.2 features.
  -encoding <encoding> :  specify character encoding for generated source files
  -enableIntrospection :  enable correct generation of Boolean getters/setters to enable Bean Introspection apis 
  -disableXmlSecurity  :  disables XML security features when parsing XML documents 
  -contentForWildcard  :  generates content property for types with multiple xs:any derived elements 
  -xmlschema         :  treat input as W3C XML Schema (default)
  -dtd               :  treat input as XML DTD (experimental,unsupported)
  -wsdl              :  treat input as WSDL and compile schemas inside it (experimental,unsupported)
  -verbose           :  be extra verbose
  -quiet             :  suppress compiler output
  -help              :  display this help message
  -version           :  display version information
  -fullversion       :  display full version information


Extensions:
  -Xinject-code       :  inject specified Java code fragments into the generated code
  -Xlocator           :  enable source location support for generated code
  -Xsync-methods      :  generate accessor methods with the 'synchronized' keyword
  -mark-generated     :  mark the generated code as @javax.annotation.Generated
                      -noDate            : do not add date
                      -Xann <annotation> : generate <annotation> instead of @javax.annotation.Generated
  -episode <FILE>     :  generate the episode file for separate compilation
  -Xpropertyaccessors :  Use XmlAccessType PROPERTY instead of FIELD for generated classes
'''
def genBeans = tasks.register('beanGeneration', JavaExec) {
    it.classpath(bg)
    it.mainClass.set('com.sun.tools.xjc.XJCFacade')
    it.args '-d', bgDest.toString()
    it.args '-p', 'info.ankin.how.parsing.jaxb.generated'
    it.args bgSrc.toString()

    doFirst {
        bgDest.toFile().mkdirs()
    }
}

tasks.named('compileJava').configure { dependsOn genBeans }
